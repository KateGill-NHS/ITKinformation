<?xml version="1.0" encoding="UTF-8"?>
		<DistributionEnvelope xmlns="urn:nhs-itk:ns:201005">
			<header trackingid="AA7665A4-0135-4B44-9299-84A137CAAE1C" service="SendNHS111Report-v2-0">
				<auditIdentity>
					<id uri="urn:nhs-uk:identity:ods:SEH" />
				</auditIdentity>
				<manifest count="1">
					<manifestitem id="uuid_7581A157-F32D-4033-A0A9-360959A641B5" mimetype="text/xml" profileid="urn:nhs-en:profile:nhs111CDADocument-v2-0" />
				</manifest>
				<senderAddress uri="urn:nhs-uk:addressing:ods:SEH" />
				<handlingSpecification>
					<spec key="urn:nhs-itk:ns:201005:interaction" value="urn:nhs-itk:interaction:primaryGeneralPractitionerRecipientNHS111CDADocument-v2-0" />
				</handlingSpecification>
			</header>
			<payloads count="1">
				<payload id="uuid_7581A157-F32D-4033-A0A9-360959A641B5">
					<ClinicalDocument xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" moodCode="EVN" classCode="DOCCLIN" xmlns="urn:hl7-org:v3">
						<typeId extension="POCD_HD000040" root="2.16.840.1.113883.1.3" />
						<messageType extension="POCD_MT200001GB02" root="2.16.840.1.113883.2.1.3.2.4.18.17" xmlns="NPFIT:HL7:Localisation" />
						<id root="2B621949-BEEC-4BB4-8CB9-F07A4752EF02" />
						<code code="819551000000100" codeSystem="2.16.840.1.113883.2.1.3.2.4.15" />
						<title>NHS 111 Report</title>
						<effectiveTime value="20120424091358" />
						<confidentialityCode code="R" codeSystem="2.16.840.1.113883.1.11.16926" displayName="restricted" />
						<setId root="E8F4B2D5-DD5C-4A17-88C0-F7956386C06E" />
						<versionNumber value="1" />
						<recordTarget typeCode="RCT" contextControlCode="OP">
							<contentId extension="COCD_TP145201GB01#PatientRole" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<patientRole classCode="PAT">
								<templateId extension="COCD_TP145201GB01#PatientRole" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id extension="" root="2.16.840.1.113883.2.1.3.2.4.18.23" />
								<addr use="H">
									<streetAddressLine>56 Imperial Way</streetAddressLine>
									<streetAddressLine>Ashford</streetAddressLine>
									<postalCode>TN23 5HU</postalCode>
								</addr>
								<addr use="PHYS">
									<streetAddressLine>56 Imperial Way</streetAddressLine>
									<streetAddressLine>Ashford</streetAddressLine>
									<postalCode>TN23 5HU</postalCode>
								</addr>
								<patient determinerCode="INSTANCE" classCode="PSN">
									<templateId extension="COCD_TP145201GB01#patientPatient" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<name>TEST, Test</name>
									<administrativeGenderCode code="1" codeSystem="2.16.840.1.113883.2.1.3.2.4.16.25" displayName="Male" />
									<birthTime value="19700101" />
									<languageCommunication>
										<templateId extension="COCD_TP145201GB01#languageCommunication" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
										<languageCode code="en" />
										<modeCode code="RSP" codeSystem="2.16.840.1.113883.5.60" displayName="Received Spoken" />
										<proficiencyLevelCode code="F" codeSystem="2.16.840.1.113883.5.61" displayName="Fair" />
										<preferenceInd nullFlavor="UNK" />
									</languageCommunication>
								</patient>
								<providerOrganization determinerCode="INSTANCE" classCode="ORG">
									<templateId extension="COCD_TP145201GB01#providerOrganization" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<id extension="Z10000" root="2.16.840.1.113883.2.1.3.2.4.19.1" />
									<name>UNKNOWN</name>
									<standardIndustryClassCode code="001" codeSystem="2.16.840.1.113883.2.1.3.2.4.17.289" displayName="GP Practice" />
								</providerOrganization>
							</patientRole>
						</recordTarget>
						<author typeCode="AUT" contextControlCode="OP">
							<contentId extension="COCD_TP145200GB01#AssignedAuthor" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<functionCode code="OA" codeSystem="2.16.840.1.113883.2.1.3.2.4.17.178" displayName="Originating Author" />
							<time value="20120424091358" />
							<assignedAuthor classCode="ASSIGNED">
								<templateId extension="COCD_TP145200GB01#AssignedAuthor" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id extension="Neil Stevens" root="2.16.840.1.113883.2.1.3.2.4.18.24" />
								<code code="NR1690" codeSystem="2.16.840.1.113883.2.1.3.2.4.17.196" displayName="Call Operator" />
								<assignedPerson classCode="PSN" determinerCode="INSTANCE">
									<templateId extension="COCD_TP145200GB01#assignedPerson" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<name>Neil Stevens</name>
								</assignedPerson>
								<representedOrganization determinerCode="INSTANCE" classCode="ORG">
									<templateId extension="COCD_TP145200GB01#representedOrganization" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<id extension="NVE001" root="2.16.840.1.113883.2.1.3.2.4.19.1" />
									<name>South East Health</name>
								</representedOrganization>
							</assignedAuthor>
						</author>
						<informant typeCode="INF" contextControlCode="OP">
							<contentId extension="COCD_TP145007UK03#RelatedEntity" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<relatedEntity classCode="PRS">
								<templateId extension="COCD_TP145007UK03#RelatedEntity" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<code code="21" codeSystem="2.16.840.1.113883.2.1.3.2.4.16.45" displayName="Self" />
								<telecom value="tel:00000000000" use="EC" />
								<relatedPerson classCode="PSN" determinerCode="INSTANCE">
									<templateId extension="COCD_TP145007UK03#relationshipHolder" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<name>Test TEST</name>
								</relatedPerson>
							</relatedEntity>
						</informant>
						<custodian typeCode="CST">
							<contentId extension="COCD_TP145018UK03#AssignedCustodian" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<assignedCustodian classCode="ASSIGNED">
								<templateId extension="COCD_TP145018UK03#AssignedCustodian" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<representedCustodianOrganization classCode="ORG" determinerCode="INSTANCE">
									<templateId extension="COCD_TP145018UK03#representedCustodianOrganization" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<id extension="NVE" root="2.16.840.1.113883.2.1.3.2.4.19.2" />
									<name>Great Yarmouth and Waveney NHS 111</name>
								</representedCustodianOrganization>
							</assignedCustodian>
						</custodian>
						<informationRecipient>
							<contentId extension="COCD_TP145203GB03#IntendedRecipient" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<intendedRecipient>
								<templateId extension="COCD_TP145203GB03#IntendedRecipient" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id extension="Z10000" root="2.16.840.1.113883.2.1.3.2.4.19.1" />
								<receivedOrganization determinerCode="INSTANCE" classCode="ORG">
									<templateId extension="COCD_TP145203GB03#representedOrganization" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<id extension="Z10000" root="2.16.840.1.113883.2.1.3.2.4.19.1" />
									<name>UNKNOWN</name>
								</receivedOrganization>
							</intendedRecipient>
						</informationRecipient>
						<participant typeCode="REFT" contextControlCode="OP">
							<contentId extension="COCD_TP145214GB01#AssociatedEntity" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<associatedEntity classCode="ASSIGNED">
								<templateId extension="COCD_TP145214GB01#AssociatedEntity" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id extension="Z10000" root="2.16.840.1.113883.2.1.3.2.4.19.2" />
								<addr use="PHYS">
									<streetAddressLine>Kingston House</streetAddressLine>
									<streetAddressLine>The Long Barrow</streetAddressLine>
									<streetAddressLine>Orbital Park</streetAddressLine>
									<streetAddressLine>Ashford</streetAddressLine>
									<streetAddressLine>Kent</streetAddressLine>
									<postalCode>TN24 0GP</postalCode>
								</addr>
								<telecom value="tel:01233505450" use="EC" />
								<scopingOrganization determinerCode="INSTANCE" classCode="ORG">
									<templateId extension="COCD_TP145214GB01#scopingOrganization" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<id extension="NVE01" root="2.16.840.1.113883.2.1.3.2.4.19.1" />
									<name>South East Health</name>
								</scopingOrganization>
							</associatedEntity>
						</participant>
						<authorization typeCode="AUTH">
							<contentId extension="COCD_TP146226GB02#Consent" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<consent classCode="CONS" moodCode="EVN">
								<templateId extension="COCD_TP146226GB02#Consent" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id root="41FBB316-4495-4527-853D-9243968CDA32" />
								<code code="425691002" codeSystem="2.16.840.1.113883.2.1.3.2.4.15" displayName="Consent given for electronic record sharing" />
								<statusCode code="completed" />
							</consent>
						</authorization>
						<componentOf typeCode="COMP">
							<contentId extension="COCD_TP146232GB01#EncompassingEncounter" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
							<encompassingEncounter classCode="ENC" moodCode="EVN">
								<templateId extension="COCD_TP146232GB01#EncompassingEncounter" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
								<id extension="14425" root="2.16.840.1.113883.2.1.3.2.4.18.34" />
								<code code="NHS111Encounter" codeSystem="2.16.840.1.113883.2.1.3.2.4.17.326" displayName="NHS111 Encounter" />
								<effectiveTime>
									<low value="20120424100633" />
									<high value="20120424091358" />
								</effectiveTime>
								<location typeCode="LOC">
									<templateId extension="COCD_TP146232GB01#location" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
									<contentId extension="COCD_TP145222GB02#HealthCareFacility" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
									<healthCareFacility classCode="ISDLOC">
										<templateId extension="COCD_TP145222GB02#HealthCareFacility" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
										<id nullFlavor="NA" />
									</healthCareFacility>
								</location>
							</encompassingEncounter>
						</componentOf>
						<component typeCode="COMP" contextConductionInd="true">
							<structuredBody classCode="DOCBODY" moodCode="EVN">
								<component typeCode="COMP" contextConductionInd="true">
									<section moodCode="EVN" classCode="DOCSECT">
										<id root="D54A3122-4AFA-4176-AF65-511A5A08862A" />
										<entry contextConductionInd="true">
											<contentId extension="COCD_TP146002GB01#ObservationMedia" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
											<observationMedia classCode="OBS" moodCode="EVN">
												<templateId extension="COCD_TP146002GB01#ObservationMedia" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
												<id root="D5F0A91B-3DDB-4AA7-86E0-F25E6E68C65E" />
												<value representation="B64" mediaType="text/xml"></value>
												<participant contextControlCode="OP" typeCode="DEV">
													<templateId extension="COCD_TP146002GB01#participant" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
													<contentId extension="COCD_TP145000GB01#ParticipantRole" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
													<participantRole>
														<templateId extension="COCD_TP145000GB01#ParticipantRole" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
														<code code="TS" codeSystem="2.16.840.1.113883.2.1.3.2.4.17.418" />
														<playingDevice determinerCode="INSTANCE">
															<templateId extension="COCD_TP145000GB01#playingDevice" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
															<manufacturerModelName displayName="Pathways" />
															<softwareName displayName="2.4" />
														</playingDevice>
													</participantRole>
												</participant>
											</observationMedia>
										</entry>
										<component typeCode="COMP" contextConductionInd="true">
											<contentId extension="COCD_TP146246GB01#Section1" root="2.16.840.1.113883.2.1.3.2.4.18.16" xmlns="NPFIT:HL7:Localisation" />
											<section moodCode="EVN" classCode="DOCSECT">
												<templateId extension="COCD_TP146246GB01#Section1" root="2.16.840.1.113883.2.1.3.2.4.18.2" />
												<id root="9F868E30-59D5-4F5C-87B6-690112B35980" />
												<title>Case Summary</title>
												<text mediaType="text/x-hl7-text+xml">
													<content styleCode="bold">Speak to Clinician from our Service for Home Management Advice</content>
													<br />
													<content styleCode="bold">Selected care service:</content>
													<br />
													<content>Dx38</content>
													<br />
													<content styleCode="bold">Pathways Assessment:</content>
													<br />
													<content>
														<br />
													</content>
													<br />
													<content styleCode="bold">Advice Given:</content>
													<br />
													<content>
														<br />
													</content>
												</text>
											</section>
										</component>
									</section>
								</component>
							</structuredBody>
						</component>
					</ClinicalDocument>
				</payload>
			</payloads>
		</DistributionEnvelope>
