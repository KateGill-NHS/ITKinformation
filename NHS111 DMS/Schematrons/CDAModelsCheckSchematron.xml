<schema xmlns="http://www.ascc.net/xml/schematron">
	<title>NPfIT Schematron for CDA Template MIF documents</title>
	<ns prefix="mif" uri="urn:hl7-org:v3/mif"/>
	<let name="templateConfigDoc" value="document('../Mif/TemplateConfig.xml')/Templates"/>
	<let name="documentRoot" value="mif:staticModel"/>
	<pattern name="CDA Models Check">
		<rule context="mif:class[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @isAbstract='false' and not(contains(@name,'Template'))]">
			<assert test="mif:attribute[@name='templateId']">Error:CDA Model class '<value-of select="@name"/>' missing templateId as per CfH CDA modelling approach.</assert>
			<assert test="mif:attribute[@name='templateId']/@fixedValue">Error:CDA Model class '<value-of select="@name"/>' templateId is fixed not per CfH CDA modelling approach.</assert>
		</rule>
		<rule context="mif:class[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @isAbstract='false' and mif:attribute[@name='contentId']]/mif:attribute[@name='templateId']">
			<assert test="substring-before(@fixedValue,'#')=ancestor-or-self::mif:staticModel/mif:packageLocation/@name">Error:CDA Model class '<value-of select="../@name"/> attribute templateId '<value-of select="substring-before(@fixedValue,'#')"/>' and modelId '<value-of select="ancestor-or-self::mif:staticModel/mif:packageLocation/@name"/>' are missmatching</assert>
			<assert test="((substring-after(@fixedValue,'#')=../@name) or (substring-after(@fixedValue,'#') = ancestor-or-self::mif:staticModel/descendant::mif:traversableConnection[@participantClassName=current()/../@name]/@name))">Error:CDA Model class '<value-of select="../@name"/> attribute 'templateId' '<value-of select="substring-after(@fixedValue,'#')"/>' is not matching class name '<value-of select="../@name"/>' or its association name '<value-of select="ancestor-or-self::mif:staticModel/descendant::mif:traversableConnection[@participantClassName=current()/../@name]/@name"/>'.</assert>
			<assert test="../mif:annotations/mif:constraint[@name='contentId']">Error class is '<value-of select="../@name"/>' missing constraint for CDA template binding but using 'contentId'.</assert>
			<assert test="@maximumMultiplicity='1' and @minimumMultiplicity='1'">Error class '<value-of select="../@name"/>' attribute templateId maximumMultiplicity and minimumMultiplicity are wrong</assert>
			<assert test="mif:type/@name='II'">Error class is '<value-of select="../@name"/>' Error class '<value-of select="../@name"/>' attribute templateId type is wrong. Should be 'II' but is '<value-of select="mif:type/@name"/>'.</assert>
		</rule>
		<rule context="mif:class[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @isAbstract='false' and not(mif:attribute[@name='contentId']) and not(ancestor-or-self::mif:staticModel/descendant::mif:specializationChild[@childClassName=current()/../@name])]/mif:attribute[@name='templateId']">
			<assert test="substring-before(@fixedValue,'#')=ancestor-or-self::mif:staticModel/mif:packageLocation/@name">Error:CDA Model class '<value-of select="../@name"/> attribute templateId '<value-of select="substring-before(@fixedValue,'#')"/>' and modelId '<value-of select="ancestor-or-self::mif:staticModel/mif:packageLocation/@name"/>' are missmatching</assert>
			<assert test="((substring-after(@fixedValue,'#')=../@name) or (substring-after(@fixedValue,'#') = ancestor-or-self::mif:staticModel/descendant::mif:traversableConnection[@participantClassName=current()/../@name]/@name))">Error:CDA Model class '<value-of select="../@name"/> attribute 'templateId' '<value-of select="substring-after(@fixedValue,'#')"/>' is not matching class name '<value-of select="../@name"/>'.</assert>
			<assert test="@maximumMultiplicity='1' and @minimumMultiplicity='1'">Error class '<value-of select="../@name"/>' attribute templateId maximumMultiplicity and minimumMultiplicity are wrong</assert>
			<assert test="mif:type/@name='II'">Error class is '<value-of select="../@name"/>' Error class '<value-of select="../@name"/>' attribute templateId type is wrong.Should be 'II' but is '<value-of select="mif:type/@name"/>'.</assert>
		</rule>
		<rule context="mif:class[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @isAbstract='false' and not(mif:attribute[@name='contentId']) and ancestor-or-self::mif:staticModel/descendant::mif:specializationChild[@childClassName=current()/../@name]]/mif:attribute[@name='templateId']">
			<assert test="substring-before(@fixedValue,'#')=ancestor-or-self::mif:staticModel/mif:packageLocation/@name">Error:CDA Model class '<value-of select="../@name"/> attribute templateId '<value-of select="substring-before(@fixedValue,'#')"/>' and modelId '<value-of select="ancestor-or-self::mif:staticModel/mif:packageLocation/@name"/>' are missmatching</assert>
			<assert test="ancestor-or-self::mif:staticModel/descendant::mif:participantClassSpecialization[@className=current()/../@name] and substring-after(@fixedValue,'#') =concat(translate(substring(current()/../@name,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),substring(current()/../@name,2))">Error:Choice CDA Model class '<value-of select="../@name"/> attribute 'templateId' '<value-of select="substring-after(@fixedValue,'#')"/>' is not matching its association name '<value-of select="concat(translate(substring(current()/../@name,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),substring(current()/../@name,2))"/>.</assert>
			<assert test="@maximumMultiplicity='1' and @minimumMultiplicity='1'">Error class '<value-of select="../@name"/>' attribute templateId maximumMultiplicity and minimumMultiplicity are wrong</assert>
			<assert test="mif:type/@name='II'">Error class is '<value-of select="../@name"/>' Error class '<value-of select="../@name"/>' attribute templateId type is wrong.Should be 'II' but is '<value-of select="mif:type/@name"/>'.</assert>
		</rule>
		<rule context="mif:class[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and contains(@name,'Template')]">
			<assert test="@isAbstract='true'">Error:CDA Model class '<value-of select="@name"/>' is not marked abstract as per CDA modelling guidelines.</assert>
		</rule>
		<rule context="mif:traversableConnection[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and contains(@name,'author') and ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName and @isAbstract='false']]">
			<assert test="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='contextControlCode']/@fixedValue='OP' and ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='functionCode']/@fixedValue='OA'">Error:CDA Model class '<value-of select="@participantClassName"/>' is modeled as wrong author. The attribute 'contextControlCode' should be 'OP' but is '<value-of select="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='contextControlCode']/@fixedValue"/>'. The attribute 'functionCode' should be 'OA' but is '<value-of select="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='functionCode']/@fixedValue"/>'</assert>
		</rule>
		<rule context="mif:traversableConnection[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and contains(@name,'participant') and ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName and @isAbstract='false']]">
			<assert test="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='contextControlCode']/@fixedValue='OP' and not(ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='functionCode'])">Error:CDA Model class '<value-of select="@participantClassName"/>' is modeled as wrong participant. The attribute 'contextControlCode' should be 'OP' but is '<value-of select="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name='contextControlCode']/@fixedValue"/>'. The attribute 'functionCode' should be not present.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO' and @id != '146061'] and (mif:type/@name='CV' or mif:type/@name='CD' or mif:type/@name='CE') and (parent::mif:class/mif:attribute[@name='moodCode']) and (parent::mif:class/mif:annotations/mif:constraint[@name=current()/@name]/mif:text/mif:p[contains(.,'typeSpec:')])]">
			<assert test="parent::mif:class/mif:annotations/mif:constraint[@name=current()/@name and mif:text/mif:p=concat('typeSpec:',current()/mif:type/@name,'.NPfIT.CDA.Url')]">Error:Class '<value-of select="parent::mif:class/@name"/>' attribute '<value-of select="@name"/>' URL flavour is modeled wrongly the based type is '<value-of select="mif:type/@name"/>' and flavours is '<value-of select="parent::mif:class/mif:annotations/mif:constraint[@name=@name]/mif:text/mif:p"/>'.</assert>
			<assert test="descendant::text()[contains(.,'CDA URL')] or descendant::mif:p[contains(.,'CDA URL')]">Error:Class '<value-of select="parent::mif:class/@name"/>' attribute '<value-of select="@name"/>' is USING CDA URL Flavour datatype but the tab.view text is asserting the WRONG flavour.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO' and @id != '146061'] and (mif:type/@name='CV' or mif:type/@name='CD' or mif:type/@name='CE' ) and  (parent::mif:class/mif:attribute[@name='moodCode']) and parent::mif:class/mif:annotations/mif:constraint[@name!=current()/@name] ]">
			<assert test="parent::mif:class/mif:annotations/mif:constraint[@name=current()/@name and mif:text/mif:p=concat('typeSpec:',mif:type/@name,'.NPfIT.CDA.Url')]">Warning:Class '<value-of select="parent::mif:class/@name"/>' attribute '<value-of select="@name"/>' URL flavour is missing which means you may be able to link to CDA StrucDoc.Text.</assert>
			<assert test="count(child::mif:annotations/mif:otherAnnotation/mif:text/descendant::mif:ul/mif:li) = 3">Error:Class '<value-of select="parent::mif:class/@name"/>' attribute '<value-of select="@name"/>' is NOT USING CDA URL Flavour datatype but the tab.view text is asserting CDA URL Flavour.</assert>
		</rule>
		<!--<rule context="mif:annotations[parent::mif:attribute[mif:type[@name='CV' or @name='CD' or @name='CE']] and parent::mif:attribute/parent::mif:class/mif:annotations/mif:constraint[@name=parent::mif:annotations/parent::mif:class/mif:attribute/@name]/mif:text/mif:p[contains(.,'typeSpec')]]">
			<assert test="descendant::text()[contains(.,'CDA URL')] or descendant::mif:p[contains(.,'CDA URL')]">Error:Class '<value-of select="ancestor::mif:class/@name"/>' datatype '<value-of select="parent::mif:attribute/@name"/>' is using CDA URL Flavour but the tab.view text is wrong in the flavour.</assert>
		</rule>-->
		<rule context="mif:constraint[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @name='contentId']">
			<assert test="starts-with(mif:text/mif:p,'NPFIT')">Warnings:Class '<value-of select="../../@name"/>' is using the contentId with wrong pattern should start with 'NPFIT' but is '<value-of select="mif:text/mif:p"/>'.</assert>
			<assert test="count($templateConfigDoc/Template[@id = current()/child::mif:text/mif:p])=1">Error:Class '<value-of select="../../@name"/>' contentId '<value-of select="mif:text/mif:p"/>' is not present the template config.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO' and not(starts-with(@id,'147'))] and (@name='classCode' and (@fixedValue='BATTERY' or @fixedValue='CLUSTER'))]">
			<assert test="starts-with(ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name,'component')">Error:Class '<value-of select="current()/../@name"/>' actrelations should be named 'component'.
			</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO' and not(starts-with(@id,'147'))] and (@name='classCode' and (@fixedValue !='BATTERY' or @fixedValue !='CLUSTER')) and (following::mif:attribute[1][@name='moodCode']) and ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]] ]">
			<assert test="starts-with(ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name,'entryRelationship') or starts-with(ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name,'precondition') or starts-with(ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name,'reference') or starts-with(ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name,'referenceRange')">Error:Class '<value-of select="current()/../@name"/>' actrelations should be named 'entryRelationship' or 'precondition' or 'reference' or 'referenceRange' but is '<value-of select="ancestor-or-self::mif:staticModel/mif:ownedAssociation/mif:connections[mif:nonTraversableConnection[@participantClassName=current()/../@name]]/mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]/@name"/>'.</assert>
		</rule>
		<rule context="mif:traversableConnection[mif:derivationSupplier[contains(@associationEndName,'Relationship')]]">
			<assert test="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name !='contexConductionInd' and contains(@fixedValue,'')]">Error:Class '<value-of select="current()/@participantClassName"/>' attribute 'contexConductionInd' is not fixed.</assert>
			<assert test="ancestor-or-self::mif:staticModel/descendant::mif:class[@name=current()/@participantClassName]/mif:attribute[@name !='separatableInd' and contains(@fixedValue,'')]">Error:Class '<value-of select="current()/@participantClassName"/>' attribute 'separatableInd' is not fixed.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and (@name='code') and current()/parent::mif:class[mif:attribute[@name='moodCode']]]">
			<assert test="not(mif:type/mif:supplierBindingArgumentDatatype)">Error: Class '<value-of select="current()/../@name"/>' attribute 'code' cannot be 'SET','LIST','BAG'.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @name='id' and @maximumMultiplicity='1' and mif:type/@name='II']">
			<assert test="contains(@isMandatory,'true')">Warning: Class '<value-of select="current()/../@name"/>' attribute '<value-of select="@name"/>' is not marked mandatory.</assert>
		</rule>
		<rule context="mif:attribute[ancestor-or-self::mif:staticModel/mif:packageLocation[@domain='CD' and @subSection='CO'] and @name='statusCode']">
			<assert test="@maximumMultiplicity='1' and @minimumMultiplicity='1' and mif:type/@name='CS'">Error: Class '<value-of select="current()/../@name"/>' attribute '<value-of select="@name"/>' is not of type 'CS'</assert>
		</rule>
	</pattern>
</schema>
